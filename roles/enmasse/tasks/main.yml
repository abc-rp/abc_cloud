---
# SETUP ENMASSE
- name: Create Enmasse namespace
  shell: kubectl create namespace {{ enmasse_namespace }}
  register: enmasse_create_namespace_cmd
  failed_when: enmasse_create_namespace_cmd.stderr != '' and 'AlreadyExists' not in enmasse_create_namespace_cmd.stderr

- name: Make sure we are using the Enmasse namespace
  shell: "kubectl config set-context --current --namespace={{ enmasse_namespace }}"

# - name: Generate wildcard certificate template
#   template:
#     src: "wildcard-cert.yml.j2"
#     dest: /tmp/wildcard-cert.yml

# - name: Create wildcard certificate resource
#   shell: kubectl create -f /tmp/wildcard-cert.yml -n {{ enmasse_namespace }}
#   register: create_wildcard_cert_resource_cmd
#   failed_when: create_wildcard_cert_resource_cmd.stderr != '' and 'AlreadyExists' not in create_wildcard_cert_resource_cmd.stderr
#   changed_when: create_wildcard_cert_resource_cmd.rc == 0

- name: Download and unarchive enmasse release
  unarchive:
    src: "{{ enmasse_release_url }}"
    dest: /tmp
    remote_src: yes

- name: Clean old certs
  file:
    state: "{{ item }}"
    path: "/tmp/enmasse-{{ enmasse_version }}/install/components/iot/examples/k8s-tls/build"
    mode: "0755"
  with_items:
    - absent
    - directory

- name: Create self-signed certificates for IoT services
  shell: "/tmp/enmasse-{{ enmasse_version }}/install/components/iot/examples/k8s-tls/create"

- name: Deploy self-signed certificates for IoT services
  shell: "/tmp/enmasse-{{ enmasse_version }}/install/components/iot/examples/k8s-tls/deploy"

- name: Create enmasse Resources
  shell: "kubectl create -f {{ item }} -n {{ enmasse_namespace }}"
  with_items: "{{ enmasse_operator_resource_items }}"
  register: create_enmasse_resource_cmd
  failed_when: create_enmasse_resource_cmd.stderr != '' and 'AlreadyExists' not in create_enmasse_resource_cmd.stderr

- name: Generate low resource auth server (Keycloak)
  template:
    src: "lowresources-authservice.yml.j2"
    dest: /tmp/lowresources-authservice.yml

- name: Create low resource auth server
  shell: kubectl create -f /tmp/lowresources-authservice.yml -n {{ enmasse_namespace }}
  register: create_authservice_cmd
  failed_when: create_authservice_cmd.stderr != '' and 'AlreadyExists' not in create_authservice_cmd.stderr
  changed_when: create_authservice_cmd.rc == 0

# - name: Create example auth server
#   shell: kubectl create -f /tmp/enmasse-{{ enmasse_version }}/install/components/example-authservices/standard-authservice.yaml -n {{ enmasse_namespace }}
#   register: create_authservice_cmd
#   failed_when: create_authservice_cmd.stderr != '' and 'AlreadyExists' not in create_authservice_cmd.stderr
#   changed_when: create_authservice_cmd.rc == 0

- name: Generate IoT config
  template:
    src: "iot-config.yml.j2"
    dest: /tmp/iot-config.yml

- name: Create IoT config
  shell: kubectl create -f /tmp/iot-config.yml -n {{ enmasse_namespace }}
  register: create_iot_config_cmd
  failed_when: create_iot_config_cmd.stderr != '' and 'AlreadyExists' not in create_iot_config_cmd.stderr
  changed_when: create_iot_config_cmd.rc == 0

- name: Create project namespace
  shell: kubectl create namespace {{ enmasse_default_project }}
  register: enmasse_create_namespace_cmd
  failed_when: enmasse_create_namespace_cmd.stderr != '' and 'AlreadyExists' not in enmasse_create_namespace_cmd.stderr

- name: Make sure we are using the project namespace
  shell: "kubectl config set-context --current --namespace={{ enmasse_default_project }}"

- name: Generate IoT project
  template:
    src: "iot-project-managed.yml.j2"
    dest: /tmp/iot-project-managed.yml

- name: Create IoT project
  shell: kubectl create -f /tmp/iot-project-managed.yml -n {{ enmasse_default_project }}
  register: create_iot_project_cmd
  failed_when: create_iot_project_cmd.stderr != '' and 'AlreadyExists' not in create_iot_project_cmd.stderr
  changed_when: create_iot_project_cmd.rc == 0

# kubectl get --namespace myapp iotproject iot && kubectl get --namespace myapp addressspace iot

- name: Ensure iot project is active
  shell: sleep 5; kubectl get --no-headers=true iotproject iot --namespace {{ enmasse_default_project }}  |  grep  -v "Active"
  register: result
  until: not result.stdout
  retries: 50
  delay: 10
  failed_when: result.stdout
  changed_when: False

- name: Ensure iot address space is active
  shell: sleep 5; kubectl get --no-headers=true addressspace iot --namespace {{ enmasse_default_project }}  |  grep  -v "Active"
  register: result
  until: not result.stdout
  retries: 50
  delay: 10
  failed_when: result.stdout
  changed_when: False

- name: Make sure we are using the Enmasse namespace
  shell: "kubectl config set-context --current --namespace={{ enmasse_namespace }}"

- name: Apply external dns annotations for registry
  shell: kubectl annotate --overwrite service iot-device-registry-external external-dns.alpha.kubernetes.io/hostname="registry.{{ enmasse_route_suffix }}."

- name: Apply external dns annotations for http
  shell: kubectl annotate --overwrite service iot-http-adapter-external external-dns.alpha.kubernetes.io/hostname="http.{{ enmasse_route_suffix }}."

- name: Apply external dns annotations for mqtt
  shell: kubectl annotate --overwrite service iot-mqtt-adapter-external external-dns.alpha.kubernetes.io/hostname="mqtt.{{ enmasse_route_suffix }}."

# TODO: This can be set up when we create the iot project

- name: Apply external dns annotations for amqp
  shell: kubectl annotate --overwrite service messaging-a9f2565-external external-dns.alpha.kubernetes.io/hostname="amqp.{{ enmasse_route_suffix }}."

- name: Apply external dns annotations for wss
  shell: kubectl annotate --overwrite service messaging-wss-a9f2565-external external-dns.alpha.kubernetes.io/hostname="wss.{{ enmasse_route_suffix }}."

- name: Make sure we are using the project namespace
  shell: "kubectl config set-context --current --namespace={{ enmasse_default_project }}"

- name: Generate IoT user
  template:
    src: "iot-user.yml.j2"
    dest: /tmp/iot-user.yml

- name: Create IoT user
  shell: kubectl create -f /tmp/iot-user.yml -n {{ enmasse_default_project }}
  register: create_iot_user_cmd
  failed_when: create_iot_user_cmd.stderr != '' and 'AlreadyExists' not in create_iot_user_cmd.stderr
  changed_when: create_iot_user_cmd.rc == 0
